<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.or.ddit.mapper.IBoardMapper">

	<sql id="boardSearch">
		<if test="searchType != null and searchType =='title'">
		   and (b.bo_title like '%' || #{searchWord} ||'%')
		</if>
		<if test="searchType != null and searchType =='writer'">
		   and (e.emp_name like '%' || #{searchWord} ||'%')
		</if>
	</sql>
	
	<!-- 자유게시판 목록 조회(페이징) -->
	<select id="selectBoardlist" parameterType="pagingVO" resultType="boardVO">
		select b.*
	 	  from (select a.*
			  		 , row_number() over(order by a.bo_no desc) rnum
			  	  from (select b.bo_no
			  	             , b.bo_title
			  	             , e.emp_no
			  	             , e.emp_name as "boWriter"
			  	             , b.bo_date
			  	             , b.bo_hit
			  	          from board b, employee e
			  	         where b.emp_no = e.emp_no
			  	           and b.bo_delyn = 'N'
			  	           and 1=1
			  	      <include refid="boardSearch"/>
			  	         order by b.bo_date desc) a
		    )b    
		<![CDATA[
		 where b.rnum >= #{startRow} and b.rnum <= #{endRow}
		]]>
	</select>
	
	<!-- 페이징 처리를 위한 게시글 갯수 -->
	<select id="selectBoardCount" parameterType="pagingVO"  resultType="int">
		select count(b.bo_no)
  		  from board b, employee e
 		 where b.bo_delyn = 'N'
 		   and b.emp_no = e.emp_no
 		   and 1=1
 		 <include refid="boardSearch"/>
	</select>
	
	<!-- 주인공 boardVO 1 -->
	<resultMap type="boardVO" id="boardMap">
		<result property="boNo" column="BO_NO"/>
		<result property="empNo" column="EMP_NO"/>
		<result property="boTitle" column="BO_TITLE"/>
		<result property="boContent" column="BO_CONTENT"/>
		<result property="boHit" column="BO_HIT"/>
		<result property="boDate" column="BO_DATE"/>
		<result property="boModdate" column="BO_MODDATE"/>
		<result property="boDelyn" column="BO_DELYN"/>
		<association property="boFile" resultMap="filesMap"></association>
	</resultMap>
	
	<!-- 1) BOARD : FILES = 1 : 1 -->
	<resultMap type="filesVO" id="filesMap">
		<result property="fileNo" column="FILE_NO"/>
		<result property="fileRegdate" column="FILE_REGDATE"/>
		<result property="fileWhereNo" column="FILE_WHERE_NO"/>
		<result property="fileWherePk" column="FILE_WHERE_PK"/>
		<collection property="fileList" resultMap="fileDetailMap"></collection>
	</resultMap>
	
	<!-- 2) FILES : FILE_DETAIL = 1 : N -->
	<resultMap type="fileDetailVO" id="fileDetailMap">
		<result property="fileDetailNo" column="FILE_DETAIL_NO"/>
		<result property="fileNo" column="FILE_NO"/>
		<result property="fileSaveName" column="FILE_SAVE_NAME"/>
		<result property="fileOriginName" column="FILE_ORIGIN_NAME"/>
		<result property="fileSize" column="FILE_SIZE"/>
		<result property="fileUrl" column="FILE_URL"/>
		<result property="fileMime" column="FILE_MIME"/>
		<result property="fileFancysize" column="FILE_FANCYSIZE"/>
	</resultMap>
	
	<!-- 게시글 상세 -->
	<select id="boardDetail" parameterType="int" resultMap="boardMap">
		select b.bo_no, b.emp_no, b.bo_title, b.bo_content, b.bo_hit, b.bo_date, b.bo_moddate, b.bo_delyn
		     , f.file_no, f.file_regdate, f.file_where_no, f.file_where_pk
		     , fd.file_detail_no, fd.file_save_name, fd.file_origin_name, fd.file_size, fd.file_url, fd.file_mime, fd.file_fancysize
		  from board b 
		  	   left outer join files f on(b.bo_no = f.file_where_pk and f.file_where_no = 3)
		       left outer join file_detail fd on(f.file_no = fd.file_no)
		 where b.bo_no = #{boNo}
	</select>
	
	<!-- 조회 수 증가 -->
	<update id="incrementHit" parameterType="int">
		update board
		   set bo_hit = bo_hit + 1
		 where bo_no = #{boNo}
	</update>
	
	
	<!-- 자유게시판 등록 및 파일 처리 시작 -->
	<!-- 자유게시판 데이터 등록 -->
	<insert id="insertBoard" parameterType="boardVO" useGeneratedKeys="true">
		<selectKey keyProperty="boNo" resultType="int" order="BEFORE">
			select seq_board.nextval from dual
		</selectKey>
		insert into board
		(
			bo_no, emp_no, bo_title, bo_content, bo_hit,
			bo_date, bo_delyn
		)
		values
		(
			#{boNo}, #{empNo}, #{boTitle}, #{boContent}, 0, sysdate, 'N'
		)
	</insert>
	
	<!-- 파일 테이블 등록(파일 상세를 담을 부모 테이블) -->
	<insert id="insertFiles" parameterType="filesVO" useGeneratedKeys="true">
		<selectKey keyProperty="fileNo" resultType="int" order="BEFORE">
			select seq_file.nextval from dual
		</selectKey>
		insert into files
		(
			file_no, file_regdate, file_where_no, file_where_pk
		)
		values
		(
			#{fileNo}, sysdate, #{fileWhereNo}, #{fileWherePk}
		)
	</insert>
	
	<!-- 파일 상세 테이블 등록 -->
	<insert id="insertFileDetail" parameterType="fileDetailVO">
		insert into file_detail
		(
			file_detail_no, file_no, file_save_name, file_origin_name, file_size,
			file_url, file_mime, file_fancysize
		)
		values
		(
			seq_file_detail.nextval, #{fileNo}, #{fileSaveName}, #{fileOriginName}, #{fileSize}, 
			#{fileUrl}, #{fileMime}, #{fileFancysize}
		)
	</insert>
	<!-- 자유게시판 등록 및 파일 처리 끝-->
	
	<!-- 게시글 수정 -->
	<update id="updateBoard" parameterType="boardVO">
		update board
		   set bo_title = #{boTitle}
		     , bo_content = #{boContent}
		     , bo_moddate = sysdate
		 where bo_no = #{boNo}
	</update>	
	
	<!-- 게시글 파일 가져오기 -->
	<select id="selectBoardFile" parameterType="int" resultType="fileDetailVO">
		select file_url
		  from file_detail
		 where file_detail_no = #{fileDetailNo}
	</select>
	
	<!-- 게시글 수정 시 기존 파일 삭제 -->
	<delete id="deleteBoardFile" parameterType="int">
		delete from file_detail
		 where file_no = #{fileNo}
	</delete>
	
	<!-- Files삭제 -->
	<delete id="deleteFiles" parameterType="int">
		delete from files
		 where file_no = #{fileNo}
	</delete>
	
	<!-- 게시글 삭제 -->
	<update id="deleteBoard" parameterType="int">
		update board
		   set bo_delyn = 'Y'
		 where bo_no = #{boNo}
	</update>
	
	<!-- 사원 이름 가져오기 -->
	<select id="selectEmpList" parameterType="int" resultType="employeeVO">
		select * 
		  from employee 
	</select>
	
	<!-- 게시글 내 댓글/답글 조회  -->
	<select id="selectComment" parameterType="int" resultType="boardCommentVO">
		select bo_co_no
			 , bo_no
			 , emp_no
			 , bo_co_content
			 , bo_co_date
			 , bo_co_parent_no
		  from board_comment
		 where bo_no = #{boNo}
		 order by bo_co_no
	</select>
	
	<!-- 게시글 내 댓글/답글 등록 -->
	<!-- insert/update/delete는 resultType을 생략(당연히 int이므로)
	BoardCommentVO(boCoNo=0, boNo=26, empNo=1, boCoContent=asdf
		, boCoDate=null, boCoModdate=null, boCoDelyn=null, boCoParentNo=0)
	null인 프로퍼티는 사용불가->오류발생!
	 -->
	<insert id="addComment" parameterType="boardCommentVO">
		<selectKey resultType="int" order="BEFORE" keyProperty="boCoNo">
			select nvl(max(bo_co_no),0)+1 from board_comment
		</selectKey>
	
		insert into board_comment
		(
			bo_co_no, bo_no, emp_no, bo_co_content, bo_co_date, bo_co_delyn
			<if test="boCoParentNo != 0">
				, bo_co_parent_no
			</if>
		)
		values
		(
			#{boCoNo}, #{boNo}, #{empNo}, #{boCoContent}, SYSDATE, 'N'
			<if test="boCoParentNo != 0">
				, #{boCoParentNo}
			</if>
		)	
	</insert>
	
	<!-- 게시글 내 댓글/답글 수정 -->
	<update id="modifyComment" parameterType="boardCommentVO">
		update board_comment
		   set bo_co_content = #{boCoContent}
		 where bo_co_no = #{boCoNo}
	</update>
	
	<!-- 게시글 내 댓글/답글 삭제 -->
	<update id="deleteComment">
		update board_comment
		   set bo_co_content = 'Deleted comments'
		 where bo_co_no = #{boCoNo}
	</update>
	
	
		
</mapper>




















